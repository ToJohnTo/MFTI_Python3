Программирование:
1. Синтаксис ЯП
2. Прикладные библиотеки.
3. Алгоритмы и структуры данных
4. Дизайн ПО
5. Практика программирования
6. Групповая работа


/Синтаксис Python 3/

print("Hello,world")
x="Hello,world"   <-----  x - это имя (объект), что-то типо ссылки, а "Hello,world" - значение.
print(x)
print(type(x))

В питоне нет переменных, как таковых, а есть ссылки. Например, 
x=1+2+3
сначала создадутся неименнованные ссылки для значений "1", "2", "3", после чего в произведутся арифметические операции, и на итоговый результат будет ссылаться именованная ссылка x. А неименнованные ссылки после этого будут удалены сборщиком мусора (garbage collector).

Note:
Каскадное присваивание: x=y=z=0
Множественное присваивание: x,y,z=1,2,3

Задачка.
a=2
b=5
Требуется обменять значения.

Решение1:
tmp=a
a=b
b=tmp

Решение2:
tmp1=b  \  tmp1,tmp2=b,a  \
tmp2=a  /                  >  a,b=b,a
a=tmp1  \  a,b=tmp1,tmp2  /
b=tmp2  /


/Арифметические операции/
Выполняются по приоритетам, последовательно слева-направо
1. x^y == x**y
2. Унарный минус -x == -x
3. xy == x*y
   x:y == x/y
   x div y == x//y
   x mod y == x%y
4. x-y == x-y
   x+y == x+y

/Ветвления/
if условие:
    оператор 1
else:
    оператор 2


/Цикл while/

while условие:    <--- заголовок цикла
    оператор 1    \
    оператор 2    |  тело
    ...           |  цикла
    оператор N    /


Итерация - однократное выполнение тела цикла
Команда break - выход из цикла.
Команда continue - перейти к новой итерации.
Также может быть в конце стоять else, ветка которого будет выполняться после завершения цикла однократно. Однако, мы на неё можем не попасть, если выйдем из цикла раньше по команде break:

while условие:   
    оператор 1    
    if условие:   
        break     
    ...           
    оператор N    
else:
    после всех
    итераций


/Цикл for/
for x in 1,5,2,4,3:
    print(x**2)


range(_start, _stop, _step) - генератор
range(1,10,1) == 1,2,3,...,9
range(1,10,2) == 1,3,5,...,9
range(10,1,-1) == 10,9,8,...,2
range(10,0,-1) == 10,9,8,...,1
